// src/redux/exploitantSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

// URL de l'API pour récupérer les exploitants et ajouter une déclaration
const API_URL = 'http://192.168.10.226:6060/api';

// Requête pour récupérer les exploitants
export const fetchExploitants = createAsyncThunk(
  'exploitants/fetchExploitants',
  async () => {
    const response = await axios.get(`${API_URL}/exploitant/list`);
    
    return response.data.items; // Les exploitants
  }
);

export const fetchExploitant = createAsyncThunk(
    'exploitants/fetchExploitant',
    async (id) => {
      const response = await axios.get(`${API_URL}/exploitant/list/${id}`);      
      return response.data.items; 
    }
  );

// Requête pour ajouter une déclaration
export const addDeclaration = createAsyncThunk(
  'declarations/addDeclaration',
  async (declarationData) => {
    console.log('addDeclaration');
    
    const response = await axios.post(`${API_URL}/declaration/declarer`, 
        declarationData,
        {
            headers: {
            'Content-Type': 'multipart/form-data',
            },
      })

    console.log(response.data);
        
    if (response.data.code === 200){
        console.log('code qr');
        console.log(response.data.items);
        
        
        const res = await axios.post(`${API_URL}/declaration/generate-qrCode/${response.data.items[0].uid}`);
     
    }
    return response.data
    })

// Slice pour gérer l'état des exploitants et des déclarations
const exploitantSlice = createSlice({
  name: 'exploitants',
  initialState: {
    exploitants: [],
    exploitant: null,
    declarations: [],
    loading: false,
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      // Pour la récupération des exploitants
      .addCase(fetchExploitants.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchExploitants.fulfilled, (state, action) => {
        state.exploitants = action.payload;
        state.loading = false;
      })
      .addCase(fetchExploitants.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      })
      // Pour la récupération d'un exploitant
      .addCase(fetchExploitant.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchExploitant.fulfilled, (state, action) => {
        state.exploitant = action.payload; 
        state.loading = false;
      })
      .addCase(fetchExploitant.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message; 
      })
      // Pour ajouter une déclaration
      .addCase(addDeclaration.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(addDeclaration.fulfilled, (state, action) => {
        state.declarations.push(action.payload); // Ajouter la déclaration
        state.loading = false;
      })
      .addCase(addDeclaration.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });

  },
});

export default exploitantSlice.reducer;
